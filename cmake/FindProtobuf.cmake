if(PROTOBUF_INCLUDE_DIR AND PROTOBUF_LIBRARY)
	set(PROTOBUF_FIND_QUIETLY TRUE)
endif(PROTOBUF_INCLUDE_DIR AND PROTOBUF_LIBRARY)

if(PROTOBUF_FULL_LIB)
	set(PROTOBUF_LIB_NAME "protobuf")
	set(PROTOBUF_LIB_NAME_X "protobuf")
else()
	set(PROTOBUF_LIB_NAME "protobuf-lite")
	set(PROTOBUF_LIB_NAME_X "protobuf-lite")
endif()

if (PROTOBUF_PREFER_STATIC_LIB)
	set(NAMES_ "${CMAKE_STATIC_LIBRARY_PREFIX}${PROTOBUF_LIB_NAME}${BICYCLE_DEBUG_POSTFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}")
else()
	set(NAMES_ "")
endif()

#message(STATUS "NAMES_->${NAMES_}")

if(PROTOBUF_FULL_LIB)
	find_library(PROTOBUF_LIBRARY
		NAMES
			${NAMES_}
			protobuf${BICYCLE_DEBUG_POSTFIX}
			libprotobuf${BICYCLE_DEBUG_POSTFIX}
		PATHS ${PROJECT_SOURCE_DIR}/redist/protobuf/lib_${SPEC}
		NO_DEFAULT_PATH)
else()
	find_library(PROTOBUF_LIBRARY
		NAMES
			${NAMES_}
			protobuf-lite${BICYCLE_DEBUG_POSTFIX}
			libprotobuf-lite${BICYCLE_DEBUG_POSTFIX}
			libprotobuf-lite${BICYCLE_DEBUG_POSTFIX}.lib
		PATHS ${PROJECT_SOURCE_DIR}/redist/protobuf/lib_${SPEC}
		NO_DEFAULT_PATH)
endif(PROTOBUF_FULL_LIB)

find_library(PROTOBUF_LIBRARY
	NAMES "${NAMES}"
	PATHS ${PROJECT_SOURCE_DIR}/redist/protobuf/lib_${SPEC}
	NO_DEFAULT_PATH)

find_path(PROTOBUF_INCLUDE_DIR
	google/protobuf/service.h
	PATHS ${PROJECT_SOURCE_DIR}/redist/protobuf/src
)

find_program(PROTOBUF_COMPILER protoc
		PATHS ${PROJECT_SOURCE_DIR}/redist/protobuf)

INCLUDE(FindPackageHandleStandardArgs)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(Protobuf DEFAULT_MSG PROTOBUF_LIBRARY PROTOBUF_INCLUDE_DIR)

MARK_AS_ADVANCED(
	PROTOBUF_INCLUDE_DIR
	PROTOBUF_LIBRARY
	PROTOBUF_COMPILER
)

include_directories(SYSTEM "${PROTOBUF_INCLUDE_DIR}")
